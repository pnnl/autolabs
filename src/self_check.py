import os
import copy
import openai
from dotenv import load_dotenv
from openai import AzureOpenAI
from bs4 import BeautifulSoup
from src.config import Client
from src.prompts import system_prompt
import re
from langchain_openai import AzureChatOpenAI
import streamlit as st
import logging

logger = logging.getLogger("main_logger")
logger.info(f"at self_checks.py - streamin = {st.session_state.streaming}")

# validator = Client("reasoning")
# validator = AzureChatOpenAI(
#     model="o3-mini",
#     reasoning_effort="medium",
#     streaming=st.session_state.streaming,
#     max_tokens=None,
#     timeout=st.session_state.timeout,
#     api_key=os.getenv("AZURE_OPENAI_API_REASONING_KEY"),
#     api_version="2024-12-01-preview",
#     azure_endpoint="https://autolabs-reasoning.openai.azure.com/openai/deployments/o3-mini/chat/completions?api-version=2024-12-01-preview"
# )

from .config import model

validator = model

validation_prompt = """
You are an expert chemist aiming to evaluate the experimental steps generated by an automated AI system before the steps are implented by an automated robotic system.  You should review the user specifications of the experiment and the system capabalities and requirements to determine if the AI has generated the experimental steps correctly.

Please review the steps generated by AI and ensure that the steps 1) meet the design specifications of the user, 2) meet the requirements of the robotic instrument, 3) computations of chemical amounts are performed correctly, and 4) Uses the minimum number of addition steps required.

-------------------------
Pay special attention to common types of errors made by the AI, which include:

1. Using invalid array sizes and vial dimensions:

The dimensions of the array depends on the size of the vials used.
- 8x12 array for 1.2 mL vials
- 6x8 array for 2 mL vials
- 4x6 array for 4 or 8 mL vials
- 2x4 array for 20 mL vials.
Make sure that the AI is using the correct array size for the required volume. Only the vials corresponding to the correct array should be used. 
                      Also make sure that the vial indexing (A1, A2, B1, etc.) is consistent with the selected array.

2. Using invalid step formatting:

- The dictionary in each <step> should contain key: value pairs. The key should be the vial index and value should be a 0 or a positive number. The dictionary SHOULD NOT contain ambiguous characters like "..." . 
- The units for solid additions should be in mg and the units for liquid additions should be in ul.
- Each step should include a plate name regardless of step type. Plates should be named numerically (Plate 1 and Plate 2) and the maximum number of plates is 2. As few plates should be used as possible, unless otherwise specified by the user.
- The step should specify the name of the chemical or solvent being used rather than using generic terms like "solvent".
- Extraneous information, such as vial groupings, should not be included in the add step. It should strictly include the following information: Add CHEMICAL (UNIT) to vials in Plate N VIAL_DICTIONARY.

3. Incorrect processing steps:

Make sure the AI adds a sufficient delay for any heating, stirring, and vortexing steps.

5. Inefficient or incorrect chemical additions:

Each addition step should include only one chemical.
Each input chemical should be added using as few steps as possible. Check that the AI does not use multiple add steps to add a chemical in different vial groupings, but instead use a single add step for all vials that will include that chemical.


6. Incorrect calculations or incorrect number of vials prepared.

Especially when large numbers of vials are prepared, please ensure the AI has not made any errors.
-------------------------

To support your validation of the steps, I will now provide the instructions to the AI, the conversation of the user and the AI, and the final steps generated by the AI. This history may also include several self-reflections steps by the AI where it attempts to correct its reasoning.
-------------------------
{0}
-------------------------

Review this information and ensure that the steps 1) meet the design specifications of the user, 2) meet the requirements of the robotic instrument, 3) computations of chemical amounts are performed correctly, and 4) Uses the minimum number of addition steps required.

After performing this review, please return three pieces of information based on the last version of the steps generated by the AI:
1. A boolean indicator of whether these steps need to be modified. Use the following format: <modify>True</modify> if errors were detected or <modify>False</modify> if the steps did not need correction.
2. You analysis and reasoning for any corrections to these steps. Please enclose in <reasoning></reasoning> tags.
3. The corrected steps enclosed within <final-steps></final-steps> tags. If no changes are needed, please just repeat the original <final-steps>.

You are providing the final checks before the commands are sent to the robot, so please be careful and be sure that you have considered all the factors to ensure full correctness.
"""


def validate(chat_history, final_steps):

    chat_history_prompt = "\n\n".join(
        [f"{message.type.capitalize()}: {message.content}" for message in chat_history]
    )

    full_prompt = validation_prompt.format(chat_history_prompt)

    # print('Validation Prompt:')
    # print(full_prompt)

    messages = [
        {"role": "system", "content": full_prompt},
    ]

    # response = validator.get_chat_completions(messages)
    response = validator.invoke(messages)

    # validator_response = response.choices[0].message.content
    validator_response = response.content

    print("Validator response:")
    print(validator_response)

    modify = re.findall(r"<modify>(.+?)</modify>", validator_response)
    if len(modify) > 0:
        modify = modify[0] != "False"
    else:
        modify = True

    reasoning = re.findall(
        r"<reasoning>(.+?)</reasoning>", validator_response, flags=re.DOTALL
    )
    if len(reasoning) > 0:
        reasoning = reasoning[0]
    else:
        reasoning = ""

    steps = re.findall(
        r"<final-steps>(.+?)</final-steps>", validator_response, flags=re.DOTALL
    )

    if len(steps) > 0:
        steps = "<final-steps>" + steps[0] + "</final-steps>"
    else:
        steps = final_steps

    return (modify, reasoning, steps)
